//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Domain
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ArchdioceseEntities : DbContext
    {
        public ArchdioceseEntities()
            : base("name=ArchdioceseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<AddressType> AddressTypes { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Collection> Collections { get; set; }
        public virtual DbSet<CollectionType> CollectionTypes { get; set; }
        public virtual DbSet<EmailAddress> EmailAddresses { get; set; }
        public virtual DbSet<EmailAddressType> EmailAddressTypes { get; set; }
        public virtual DbSet<Expens> Expenses { get; set; }
        public virtual DbSet<ExpenseType> ExpenseTypes { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<Income> Incomes { get; set; }
        public virtual DbSet<IncomeType> IncomeTypes { get; set; }
        public virtual DbSet<MaritalStatus> MaritalStatuses { get; set; }
        public virtual DbSet<Parish> Parishes { get; set; }
        public virtual DbSet<ParishType> ParishTypes { get; set; }
        public virtual DbSet<ParishUser> ParishUsers { get; set; }
        public virtual DbSet<Person> Persons { get; set; }
        public virtual DbSet<PersonType> PersonTypes { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TelephoneNumber> TelephoneNumbers { get; set; }
        public virtual DbSet<TelephoneNumberType> TelephoneNumberTypes { get; set; }
        public virtual DbSet<Title> Titles { get; set; }
        public virtual DbSet<UserGroup> UserGroups { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<ChurchGroup> ChurchGroups { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int usp_DeleteAddresses(Nullable<int> personID, Nullable<int> addressTypeID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("personID", personID) :
                new ObjectParameter("personID", typeof(int));
    
            var addressTypeIDParameter = addressTypeID.HasValue ?
                new ObjectParameter("addressTypeID", addressTypeID) :
                new ObjectParameter("addressTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteAddresses", personIDParameter, addressTypeIDParameter);
        }
    
        public virtual int usp_DeleteAddressTypes(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteAddressTypes", iDParameter);
        }
    
        public virtual int usp_DeleteChurchGroups(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteChurchGroups", iDParameter);
        }
    
        public virtual int usp_DeleteCollections(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteCollections", iDParameter);
        }
    
        public virtual int usp_DeleteCollectionTypes(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteCollectionTypes", iDParameter);
        }
    
        public virtual int usp_DeleteEmailAddresses(Nullable<int> personID, Nullable<int> emailAddressTypeID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("personID", personID) :
                new ObjectParameter("personID", typeof(int));
    
            var emailAddressTypeIDParameter = emailAddressTypeID.HasValue ?
                new ObjectParameter("emailAddressTypeID", emailAddressTypeID) :
                new ObjectParameter("emailAddressTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteEmailAddresses", personIDParameter, emailAddressTypeIDParameter);
        }
    
        public virtual int usp_DeleteEmailAddressTypes(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteEmailAddressTypes", iDParameter);
        }
    
        public virtual int usp_DeleteGenders(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteGenders", iDParameter);
        }
    
        public virtual int usp_DeleteMaritalStatuses(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteMaritalStatuses", iDParameter);
        }
    
        public virtual int usp_DeleteParishes(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteParishes", iDParameter);
        }
    
        public virtual int usp_DeleteParishTypes(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteParishTypes", iDParameter);
        }
    
        public virtual int usp_DeleteParishUsers(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteParishUsers", iDParameter);
        }
    
        public virtual int usp_DeletePersons(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeletePersons", iDParameter);
        }
    
        public virtual int usp_DeletePersonTypes(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeletePersonTypes", iDParameter);
        }
    
        public virtual int usp_DeleteTelephoneNumbers(Nullable<int> personID, Nullable<int> telephoneNumberTypeID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("personID", personID) :
                new ObjectParameter("personID", typeof(int));
    
            var telephoneNumberTypeIDParameter = telephoneNumberTypeID.HasValue ?
                new ObjectParameter("telephoneNumberTypeID", telephoneNumberTypeID) :
                new ObjectParameter("telephoneNumberTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteTelephoneNumbers", personIDParameter, telephoneNumberTypeIDParameter);
        }
    
        public virtual int usp_DeleteTelephoneNumberTypes(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteTelephoneNumberTypes", iDParameter);
        }
    
        public virtual int usp_DeleteTitles(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteTitles", iDParameter);
        }
    
        public virtual int usp_DeleteUserGroups(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteUserGroups", iDParameter);
        }
    
        public virtual int usp_DeleteUsers(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteUsers", iDParameter);
        }
    
        public virtual int usp_DisableCollectionTypes(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DisableCollectionTypes", iDParameter);
        }
    
        public virtual int usp_EnableCollectionTypes(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EnableCollectionTypes", iDParameter);
        }
    
        public virtual int usp_GetAddresses(Nullable<int> personID, Nullable<int> addressTypeID, string addressLine1, string addressLine2, string addressLine3, string suburb, string city)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("personID", personID) :
                new ObjectParameter("personID", typeof(int));
    
            var addressTypeIDParameter = addressTypeID.HasValue ?
                new ObjectParameter("addressTypeID", addressTypeID) :
                new ObjectParameter("addressTypeID", typeof(int));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("addressLine1", addressLine1) :
                new ObjectParameter("addressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("addressLine2", addressLine2) :
                new ObjectParameter("addressLine2", typeof(string));
    
            var addressLine3Parameter = addressLine3 != null ?
                new ObjectParameter("addressLine3", addressLine3) :
                new ObjectParameter("addressLine3", typeof(string));
    
            var suburbParameter = suburb != null ?
                new ObjectParameter("suburb", suburb) :
                new ObjectParameter("suburb", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetAddresses", personIDParameter, addressTypeIDParameter, addressLine1Parameter, addressLine2Parameter, addressLine3Parameter, suburbParameter, cityParameter);
        }
    
        public virtual ObjectResult<usp_GetAddressTypes_Result> usp_GetAddressTypes(Nullable<int> iD, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAddressTypes_Result>("usp_GetAddressTypes", iDParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<usp_GetChurchGroups_Result> usp_GetChurchGroups(Nullable<int> iD, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetChurchGroups_Result>("usp_GetChurchGroups", iDParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<usp_GetCollections_Result> usp_GetCollections(Nullable<int> iD, Nullable<int> parishUserID, Nullable<decimal> amount, Nullable<int> collectionTypeID, Nullable<System.DateTime> collectionDateTime)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var parishUserIDParameter = parishUserID.HasValue ?
                new ObjectParameter("parishUserID", parishUserID) :
                new ObjectParameter("parishUserID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var collectionTypeIDParameter = collectionTypeID.HasValue ?
                new ObjectParameter("collectionTypeID", collectionTypeID) :
                new ObjectParameter("collectionTypeID", typeof(int));
    
            var collectionDateTimeParameter = collectionDateTime.HasValue ?
                new ObjectParameter("collectionDateTime", collectionDateTime) :
                new ObjectParameter("collectionDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCollections_Result>("usp_GetCollections", iDParameter, parishUserIDParameter, amountParameter, collectionTypeIDParameter, collectionDateTimeParameter);
        }
    
        public virtual ObjectResult<usp_GetCollectionTypes_Result> usp_GetCollectionTypes(Nullable<int> iD, string collectionTypeDescription)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var collectionTypeDescriptionParameter = collectionTypeDescription != null ?
                new ObjectParameter("collectionTypeDescription", collectionTypeDescription) :
                new ObjectParameter("collectionTypeDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCollectionTypes_Result>("usp_GetCollectionTypes", iDParameter, collectionTypeDescriptionParameter);
        }
    
        public virtual int usp_GetEmailAddresses(Nullable<int> personID, Nullable<int> emailAddressTypeID, string emailAddress, Nullable<bool> isDefault)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("personID", personID) :
                new ObjectParameter("personID", typeof(int));
    
            var emailAddressTypeIDParameter = emailAddressTypeID.HasValue ?
                new ObjectParameter("emailAddressTypeID", emailAddressTypeID) :
                new ObjectParameter("emailAddressTypeID", typeof(int));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("emailAddress", emailAddress) :
                new ObjectParameter("emailAddress", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("isDefault", isDefault) :
                new ObjectParameter("isDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetEmailAddresses", personIDParameter, emailAddressTypeIDParameter, emailAddressParameter, isDefaultParameter);
        }
    
        public virtual ObjectResult<usp_GetEmailAddressTypes_Result> usp_GetEmailAddressTypes(Nullable<int> iD, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetEmailAddressTypes_Result>("usp_GetEmailAddressTypes", iDParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<usp_GetGenders_Result> usp_GetGenders(Nullable<int> iD, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetGenders_Result>("usp_GetGenders", iDParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<usp_GetMaritalStatuses_Result> usp_GetMaritalStatuses(Nullable<int> iD, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetMaritalStatuses_Result>("usp_GetMaritalStatuses", iDParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<usp_GetParishes_Result> usp_GetParishes(Nullable<int> iD, string parishName, Nullable<int> parishTypeID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var parishNameParameter = parishName != null ?
                new ObjectParameter("parishName", parishName) :
                new ObjectParameter("parishName", typeof(string));
    
            var parishTypeIDParameter = parishTypeID.HasValue ?
                new ObjectParameter("parishTypeID", parishTypeID) :
                new ObjectParameter("parishTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetParishes_Result>("usp_GetParishes", iDParameter, parishNameParameter, parishTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetParishesByUserID_Result> usp_GetParishesByUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetParishesByUserID_Result>("usp_GetParishesByUserID", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetParishTypes_Result> usp_GetParishTypes(Nullable<int> iD, string parishTypeDescription)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var parishTypeDescriptionParameter = parishTypeDescription != null ?
                new ObjectParameter("parishTypeDescription", parishTypeDescription) :
                new ObjectParameter("parishTypeDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetParishTypes_Result>("usp_GetParishTypes", iDParameter, parishTypeDescriptionParameter);
        }
    
        public virtual ObjectResult<usp_GetParishUsers_Result> usp_GetParishUsers(Nullable<int> iD, Nullable<int> parishID, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var parishIDParameter = parishID.HasValue ?
                new ObjectParameter("parishID", parishID) :
                new ObjectParameter("parishID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetParishUsers_Result>("usp_GetParishUsers", iDParameter, parishIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetPersons_Result> usp_GetPersons(Nullable<int> iD, Nullable<int> titleID, Nullable<int> personTypeID, string firstName, string surname, Nullable<System.DateTime> dateOfBirth, Nullable<int> genderID, Nullable<int> maritalStatusID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var titleIDParameter = titleID.HasValue ?
                new ObjectParameter("titleID", titleID) :
                new ObjectParameter("titleID", typeof(int));
    
            var personTypeIDParameter = personTypeID.HasValue ?
                new ObjectParameter("personTypeID", personTypeID) :
                new ObjectParameter("personTypeID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("surname", surname) :
                new ObjectParameter("surname", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("dateOfBirth", dateOfBirth) :
                new ObjectParameter("dateOfBirth", typeof(System.DateTime));
    
            var genderIDParameter = genderID.HasValue ?
                new ObjectParameter("genderID", genderID) :
                new ObjectParameter("genderID", typeof(int));
    
            var maritalStatusIDParameter = maritalStatusID.HasValue ?
                new ObjectParameter("maritalStatusID", maritalStatusID) :
                new ObjectParameter("maritalStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPersons_Result>("usp_GetPersons", iDParameter, titleIDParameter, personTypeIDParameter, firstNameParameter, surnameParameter, dateOfBirthParameter, genderIDParameter, maritalStatusIDParameter);
        }
    
        public virtual ObjectResult<usp_GetPersonTypes_Result> usp_GetPersonTypes(Nullable<int> iD, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPersonTypes_Result>("usp_GetPersonTypes", iDParameter, descriptionParameter);
        }
    
        public virtual int usp_GetTelephoneNumbers(Nullable<int> personID, Nullable<int> telephoneNumberTypeID, string telephoneNumber, Nullable<bool> isDefault)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("personID", personID) :
                new ObjectParameter("personID", typeof(int));
    
            var telephoneNumberTypeIDParameter = telephoneNumberTypeID.HasValue ?
                new ObjectParameter("telephoneNumberTypeID", telephoneNumberTypeID) :
                new ObjectParameter("telephoneNumberTypeID", typeof(int));
    
            var telephoneNumberParameter = telephoneNumber != null ?
                new ObjectParameter("telephoneNumber", telephoneNumber) :
                new ObjectParameter("telephoneNumber", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("isDefault", isDefault) :
                new ObjectParameter("isDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetTelephoneNumbers", personIDParameter, telephoneNumberTypeIDParameter, telephoneNumberParameter, isDefaultParameter);
        }
    
        public virtual ObjectResult<usp_GetTelephoneNumberTypes_Result> usp_GetTelephoneNumberTypes(Nullable<int> iD, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTelephoneNumberTypes_Result>("usp_GetTelephoneNumberTypes", iDParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<usp_GetTitles_Result> usp_GetTitles(Nullable<int> iD, string description, string abbreviation)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var abbreviationParameter = abbreviation != null ?
                new ObjectParameter("abbreviation", abbreviation) :
                new ObjectParameter("abbreviation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTitles_Result>("usp_GetTitles", iDParameter, descriptionParameter, abbreviationParameter);
        }
    
        public virtual ObjectResult<usp_GetUserGroups_Result> usp_GetUserGroups(Nullable<int> iD, string userGroupName, string permissionString)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userGroupNameParameter = userGroupName != null ?
                new ObjectParameter("userGroupName", userGroupName) :
                new ObjectParameter("userGroupName", typeof(string));
    
            var permissionStringParameter = permissionString != null ?
                new ObjectParameter("permissionString", permissionString) :
                new ObjectParameter("permissionString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUserGroups_Result>("usp_GetUserGroups", iDParameter, userGroupNameParameter, permissionStringParameter);
        }
    
        public virtual ObjectResult<usp_GetUsers_Result> usp_GetUsers(Nullable<int> iD, string username, string password, Nullable<int> userGroupID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("userGroupID", userGroupID) :
                new ObjectParameter("userGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUsers_Result>("usp_GetUsers", iDParameter, usernameParameter, passwordParameter, userGroupIDParameter);
        }
    
        public virtual int usp_InsertAddresses(Nullable<int> personID, Nullable<int> addressTypeID, string addressLine1, string addressLine2, string addressLine3, string suburb, string city)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("personID", personID) :
                new ObjectParameter("personID", typeof(int));
    
            var addressTypeIDParameter = addressTypeID.HasValue ?
                new ObjectParameter("addressTypeID", addressTypeID) :
                new ObjectParameter("addressTypeID", typeof(int));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("addressLine1", addressLine1) :
                new ObjectParameter("addressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("addressLine2", addressLine2) :
                new ObjectParameter("addressLine2", typeof(string));
    
            var addressLine3Parameter = addressLine3 != null ?
                new ObjectParameter("addressLine3", addressLine3) :
                new ObjectParameter("addressLine3", typeof(string));
    
            var suburbParameter = suburb != null ?
                new ObjectParameter("suburb", suburb) :
                new ObjectParameter("suburb", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertAddresses", personIDParameter, addressTypeIDParameter, addressLine1Parameter, addressLine2Parameter, addressLine3Parameter, suburbParameter, cityParameter);
        }
    
        public virtual int usp_InsertAddressTypes(Nullable<int> iD, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertAddressTypes", iDParameter, descriptionParameter);
        }
    
        public virtual int usp_InsertChurchGroups(ObjectParameter iD, string description)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertChurchGroups", iD, descriptionParameter);
        }
    
        public virtual int usp_InsertCollections(ObjectParameter iD, Nullable<int> parishUserID, Nullable<decimal> amount, Nullable<int> collectionTypeID, Nullable<System.DateTime> collectionDateTime)
        {
            var parishUserIDParameter = parishUserID.HasValue ?
                new ObjectParameter("parishUserID", parishUserID) :
                new ObjectParameter("parishUserID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var collectionTypeIDParameter = collectionTypeID.HasValue ?
                new ObjectParameter("collectionTypeID", collectionTypeID) :
                new ObjectParameter("collectionTypeID", typeof(int));
    
            var collectionDateTimeParameter = collectionDateTime.HasValue ?
                new ObjectParameter("collectionDateTime", collectionDateTime) :
                new ObjectParameter("collectionDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertCollections", iD, parishUserIDParameter, amountParameter, collectionTypeIDParameter, collectionDateTimeParameter);
        }
    
        public virtual int usp_InsertCollectionTypes(ObjectParameter iD, string collectionTypeDescription)
        {
            var collectionTypeDescriptionParameter = collectionTypeDescription != null ?
                new ObjectParameter("collectionTypeDescription", collectionTypeDescription) :
                new ObjectParameter("collectionTypeDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertCollectionTypes", iD, collectionTypeDescriptionParameter);
        }
    
        public virtual int usp_InsertEmailAddresses(Nullable<int> personID, Nullable<int> emailAddressTypeID, string emailAddress, Nullable<bool> isDefault)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("personID", personID) :
                new ObjectParameter("personID", typeof(int));
    
            var emailAddressTypeIDParameter = emailAddressTypeID.HasValue ?
                new ObjectParameter("emailAddressTypeID", emailAddressTypeID) :
                new ObjectParameter("emailAddressTypeID", typeof(int));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("emailAddress", emailAddress) :
                new ObjectParameter("emailAddress", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("isDefault", isDefault) :
                new ObjectParameter("isDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertEmailAddresses", personIDParameter, emailAddressTypeIDParameter, emailAddressParameter, isDefaultParameter);
        }
    
        public virtual int usp_InsertEmailAddressTypes(Nullable<int> iD, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertEmailAddressTypes", iDParameter, descriptionParameter);
        }
    
        public virtual int usp_InsertGenders(Nullable<int> iD, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertGenders", iDParameter, descriptionParameter);
        }
    
        public virtual int usp_InsertMaritalStatuses(Nullable<int> iD, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertMaritalStatuses", iDParameter, descriptionParameter);
        }
    
        public virtual int usp_InsertParishes(ObjectParameter iD, string parishName, Nullable<int> parishTypeID)
        {
            var parishNameParameter = parishName != null ?
                new ObjectParameter("parishName", parishName) :
                new ObjectParameter("parishName", typeof(string));
    
            var parishTypeIDParameter = parishTypeID.HasValue ?
                new ObjectParameter("parishTypeID", parishTypeID) :
                new ObjectParameter("parishTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertParishes", iD, parishNameParameter, parishTypeIDParameter);
        }
    
        public virtual int usp_InsertParishTypes(ObjectParameter iD, string parishTypeDescription)
        {
            var parishTypeDescriptionParameter = parishTypeDescription != null ?
                new ObjectParameter("parishTypeDescription", parishTypeDescription) :
                new ObjectParameter("parishTypeDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertParishTypes", iD, parishTypeDescriptionParameter);
        }
    
        public virtual int usp_InsertParishUsers(ObjectParameter iD, Nullable<int> parishID, Nullable<int> userID)
        {
            var parishIDParameter = parishID.HasValue ?
                new ObjectParameter("parishID", parishID) :
                new ObjectParameter("parishID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertParishUsers", iD, parishIDParameter, userIDParameter);
        }
    
        public virtual int usp_InsertPersons(ObjectParameter iD, Nullable<int> titleID, Nullable<int> personTypeID, string firstName, string surname, Nullable<System.DateTime> dateOfBirth, Nullable<int> genderID, Nullable<int> maritalStatusID)
        {
            var titleIDParameter = titleID.HasValue ?
                new ObjectParameter("titleID", titleID) :
                new ObjectParameter("titleID", typeof(int));
    
            var personTypeIDParameter = personTypeID.HasValue ?
                new ObjectParameter("personTypeID", personTypeID) :
                new ObjectParameter("personTypeID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("surname", surname) :
                new ObjectParameter("surname", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("dateOfBirth", dateOfBirth) :
                new ObjectParameter("dateOfBirth", typeof(System.DateTime));
    
            var genderIDParameter = genderID.HasValue ?
                new ObjectParameter("genderID", genderID) :
                new ObjectParameter("genderID", typeof(int));
    
            var maritalStatusIDParameter = maritalStatusID.HasValue ?
                new ObjectParameter("maritalStatusID", maritalStatusID) :
                new ObjectParameter("maritalStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertPersons", iD, titleIDParameter, personTypeIDParameter, firstNameParameter, surnameParameter, dateOfBirthParameter, genderIDParameter, maritalStatusIDParameter);
        }
    
        public virtual int usp_InsertPersonTypes(Nullable<int> iD, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertPersonTypes", iDParameter, descriptionParameter);
        }
    
        public virtual int usp_InsertTelephoneNumbers(Nullable<int> personID, Nullable<int> telephoneNumberTypeID, string telephoneNumber, Nullable<bool> isDefault)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("personID", personID) :
                new ObjectParameter("personID", typeof(int));
    
            var telephoneNumberTypeIDParameter = telephoneNumberTypeID.HasValue ?
                new ObjectParameter("telephoneNumberTypeID", telephoneNumberTypeID) :
                new ObjectParameter("telephoneNumberTypeID", typeof(int));
    
            var telephoneNumberParameter = telephoneNumber != null ?
                new ObjectParameter("telephoneNumber", telephoneNumber) :
                new ObjectParameter("telephoneNumber", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("isDefault", isDefault) :
                new ObjectParameter("isDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertTelephoneNumbers", personIDParameter, telephoneNumberTypeIDParameter, telephoneNumberParameter, isDefaultParameter);
        }
    
        public virtual int usp_InsertTelephoneNumberTypes(Nullable<int> iD, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertTelephoneNumberTypes", iDParameter, descriptionParameter);
        }
    
        public virtual int usp_InsertTitles(Nullable<int> iD, string description, string abbreviation)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var abbreviationParameter = abbreviation != null ?
                new ObjectParameter("abbreviation", abbreviation) :
                new ObjectParameter("abbreviation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertTitles", iDParameter, descriptionParameter, abbreviationParameter);
        }
    
        public virtual int usp_InsertUserGroups(ObjectParameter iD, string userGroupName, string permissionString)
        {
            var userGroupNameParameter = userGroupName != null ?
                new ObjectParameter("userGroupName", userGroupName) :
                new ObjectParameter("userGroupName", typeof(string));
    
            var permissionStringParameter = permissionString != null ?
                new ObjectParameter("permissionString", permissionString) :
                new ObjectParameter("permissionString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertUserGroups", iD, userGroupNameParameter, permissionStringParameter);
        }
    
        public virtual int usp_InsertUsers(ObjectParameter iD, string username, string password, Nullable<int> userGroupID)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("userGroupID", userGroupID) :
                new ObjectParameter("userGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertUsers", iD, usernameParameter, passwordParameter, userGroupIDParameter);
        }
    
        public virtual int usp_UpdateAddresses(Nullable<int> personID, Nullable<int> addressTypeID, string addressLine1, string addressLine2, string addressLine3, string suburb, string city)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("personID", personID) :
                new ObjectParameter("personID", typeof(int));
    
            var addressTypeIDParameter = addressTypeID.HasValue ?
                new ObjectParameter("addressTypeID", addressTypeID) :
                new ObjectParameter("addressTypeID", typeof(int));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("addressLine1", addressLine1) :
                new ObjectParameter("addressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("addressLine2", addressLine2) :
                new ObjectParameter("addressLine2", typeof(string));
    
            var addressLine3Parameter = addressLine3 != null ?
                new ObjectParameter("addressLine3", addressLine3) :
                new ObjectParameter("addressLine3", typeof(string));
    
            var suburbParameter = suburb != null ?
                new ObjectParameter("suburb", suburb) :
                new ObjectParameter("suburb", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateAddresses", personIDParameter, addressTypeIDParameter, addressLine1Parameter, addressLine2Parameter, addressLine3Parameter, suburbParameter, cityParameter);
        }
    
        public virtual int usp_UpdateAddressTypes(Nullable<int> iD, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateAddressTypes", iDParameter, descriptionParameter);
        }
    
        public virtual int usp_UpdateChurchGroups(Nullable<int> iD, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateChurchGroups", iDParameter, descriptionParameter);
        }
    
        public virtual int usp_UpdateCollections(Nullable<int> iD, Nullable<int> parishUserID, Nullable<decimal> amount, Nullable<int> collectionTypeID, Nullable<System.DateTime> collectionDateTime)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var parishUserIDParameter = parishUserID.HasValue ?
                new ObjectParameter("parishUserID", parishUserID) :
                new ObjectParameter("parishUserID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var collectionTypeIDParameter = collectionTypeID.HasValue ?
                new ObjectParameter("collectionTypeID", collectionTypeID) :
                new ObjectParameter("collectionTypeID", typeof(int));
    
            var collectionDateTimeParameter = collectionDateTime.HasValue ?
                new ObjectParameter("collectionDateTime", collectionDateTime) :
                new ObjectParameter("collectionDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateCollections", iDParameter, parishUserIDParameter, amountParameter, collectionTypeIDParameter, collectionDateTimeParameter);
        }
    
        public virtual int usp_UpdateCollectionTypes(Nullable<int> iD, string collectionTypeDescription)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var collectionTypeDescriptionParameter = collectionTypeDescription != null ?
                new ObjectParameter("collectionTypeDescription", collectionTypeDescription) :
                new ObjectParameter("collectionTypeDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateCollectionTypes", iDParameter, collectionTypeDescriptionParameter);
        }
    
        public virtual int usp_UpdateEmailAddresses(Nullable<int> personID, Nullable<int> emailAddressTypeID, string emailAddress, Nullable<bool> isDefault)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("personID", personID) :
                new ObjectParameter("personID", typeof(int));
    
            var emailAddressTypeIDParameter = emailAddressTypeID.HasValue ?
                new ObjectParameter("emailAddressTypeID", emailAddressTypeID) :
                new ObjectParameter("emailAddressTypeID", typeof(int));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("emailAddress", emailAddress) :
                new ObjectParameter("emailAddress", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("isDefault", isDefault) :
                new ObjectParameter("isDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateEmailAddresses", personIDParameter, emailAddressTypeIDParameter, emailAddressParameter, isDefaultParameter);
        }
    
        public virtual int usp_UpdateEmailAddressTypes(Nullable<int> iD, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateEmailAddressTypes", iDParameter, descriptionParameter);
        }
    
        public virtual int usp_UpdateGenders(Nullable<int> iD, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateGenders", iDParameter, descriptionParameter);
        }
    
        public virtual int usp_UpdateMaritalStatuses(Nullable<int> iD, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateMaritalStatuses", iDParameter, descriptionParameter);
        }
    
        public virtual int usp_UpdateParishes(Nullable<int> iD, string parishName, Nullable<int> parishTypeID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var parishNameParameter = parishName != null ?
                new ObjectParameter("parishName", parishName) :
                new ObjectParameter("parishName", typeof(string));
    
            var parishTypeIDParameter = parishTypeID.HasValue ?
                new ObjectParameter("parishTypeID", parishTypeID) :
                new ObjectParameter("parishTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateParishes", iDParameter, parishNameParameter, parishTypeIDParameter);
        }
    
        public virtual int usp_UpdateParishTypes(Nullable<int> iD, string parishTypeDescription)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var parishTypeDescriptionParameter = parishTypeDescription != null ?
                new ObjectParameter("parishTypeDescription", parishTypeDescription) :
                new ObjectParameter("parishTypeDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateParishTypes", iDParameter, parishTypeDescriptionParameter);
        }
    
        public virtual int usp_UpdateParishUsers(Nullable<int> iD, Nullable<int> parishID, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var parishIDParameter = parishID.HasValue ?
                new ObjectParameter("parishID", parishID) :
                new ObjectParameter("parishID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateParishUsers", iDParameter, parishIDParameter, userIDParameter);
        }
    
        public virtual int usp_UpdatePersons(Nullable<int> iD, Nullable<int> titleID, Nullable<int> personTypeID, string firstName, string surname, Nullable<System.DateTime> dateOfBirth, Nullable<int> genderID, Nullable<int> maritalStatusID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var titleIDParameter = titleID.HasValue ?
                new ObjectParameter("titleID", titleID) :
                new ObjectParameter("titleID", typeof(int));
    
            var personTypeIDParameter = personTypeID.HasValue ?
                new ObjectParameter("personTypeID", personTypeID) :
                new ObjectParameter("personTypeID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("surname", surname) :
                new ObjectParameter("surname", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("dateOfBirth", dateOfBirth) :
                new ObjectParameter("dateOfBirth", typeof(System.DateTime));
    
            var genderIDParameter = genderID.HasValue ?
                new ObjectParameter("genderID", genderID) :
                new ObjectParameter("genderID", typeof(int));
    
            var maritalStatusIDParameter = maritalStatusID.HasValue ?
                new ObjectParameter("maritalStatusID", maritalStatusID) :
                new ObjectParameter("maritalStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdatePersons", iDParameter, titleIDParameter, personTypeIDParameter, firstNameParameter, surnameParameter, dateOfBirthParameter, genderIDParameter, maritalStatusIDParameter);
        }
    
        public virtual int usp_UpdatePersonTypes(Nullable<int> iD, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdatePersonTypes", iDParameter, descriptionParameter);
        }
    
        public virtual int usp_UpdateTelephoneNumbers(Nullable<int> personID, Nullable<int> telephoneNumberTypeID, string telephoneNumber, Nullable<bool> isDefault)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("personID", personID) :
                new ObjectParameter("personID", typeof(int));
    
            var telephoneNumberTypeIDParameter = telephoneNumberTypeID.HasValue ?
                new ObjectParameter("telephoneNumberTypeID", telephoneNumberTypeID) :
                new ObjectParameter("telephoneNumberTypeID", typeof(int));
    
            var telephoneNumberParameter = telephoneNumber != null ?
                new ObjectParameter("telephoneNumber", telephoneNumber) :
                new ObjectParameter("telephoneNumber", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("isDefault", isDefault) :
                new ObjectParameter("isDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateTelephoneNumbers", personIDParameter, telephoneNumberTypeIDParameter, telephoneNumberParameter, isDefaultParameter);
        }
    
        public virtual int usp_UpdateTelephoneNumberTypes(Nullable<int> iD, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateTelephoneNumberTypes", iDParameter, descriptionParameter);
        }
    
        public virtual int usp_UpdateTitles(Nullable<int> iD, string description, string abbreviation)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var abbreviationParameter = abbreviation != null ?
                new ObjectParameter("abbreviation", abbreviation) :
                new ObjectParameter("abbreviation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateTitles", iDParameter, descriptionParameter, abbreviationParameter);
        }
    
        public virtual int usp_UpdateUserGroups(Nullable<int> iD, string userGroupName, string permissionString)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userGroupNameParameter = userGroupName != null ?
                new ObjectParameter("userGroupName", userGroupName) :
                new ObjectParameter("userGroupName", typeof(string));
    
            var permissionStringParameter = permissionString != null ?
                new ObjectParameter("permissionString", permissionString) :
                new ObjectParameter("permissionString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateUserGroups", iDParameter, userGroupNameParameter, permissionStringParameter);
        }
    
        public virtual int usp_UpdateUsers(Nullable<int> iD, string username, string password, Nullable<int> userGroupID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("userGroupID", userGroupID) :
                new ObjectParameter("userGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateUsers", iDParameter, usernameParameter, passwordParameter, userGroupIDParameter);
        }
    
        public virtual ObjectResult<usp_VerifyUsernameAndPassword_Result> usp_VerifyUsernameAndPassword(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_VerifyUsernameAndPassword_Result>("usp_VerifyUsernameAndPassword", usernameParameter, passwordParameter);
        }
    }
}
